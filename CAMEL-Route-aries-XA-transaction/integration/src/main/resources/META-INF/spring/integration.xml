<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://camel.apache.org/schema/spring
	   http://camel.apache.org/schema/spring/camel-spring.xsd
	   http://www.springframework.org/schema/osgi
	   http://www.springframework.org/schema/osgi/spring-osgi.xsd">

	<!-- Aries JTA provides a transaction manager that implements org.springframework.transaction.PlatformTransactionManager. 
		We can use <osgi:reference/> to lookup this service from the OSGi Service Registry and start using it in this Spring file -->
	<osgi:reference id="platformTxManager"
		interface="org.springframework.transaction.PlatformTransactionManager" />
	
	<!-- needed by the ResourceManager in order to provide XA recovery -->
	<osgi:reference id="recoverableTxManager"
		interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager" />

	<!-- Setting up the amq:// components with a configuration that points to 
		the JcaPooledConnectionFactory and the global Spring PlatformTransactiongManager. 
		Note that transacted is set to 'false' because it's the JTA TransactionManager 
		that manages the transactions and not the JMS component itself. -->
	<bean id="amq" class="org.apache.camel.component.jms.JmsComponent">
		<property name="configuration" ref="AMQConfig" />
	</bean>

	<bean id="AMQConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="XAPooledCF" />
		<property name="transacted" value="false" />
		<property name="transactionManager" ref="platformTxManager" />
		<property name="maxConcurrentConsumers" value="1" />
		<property name="cacheLevelName" value="CACHE_NONE" />
	</bean>

	<!-- The JcaPooledConnectionFactory ensures that the JMS Sessions get enlisted 
		in the global transaction manager -->
	<bean id="XAPooledCF" class="org.apache.activemq.pool.JcaPooledConnectionFactory"
		init-method="start" destroy-method="stop">
		<property name="name" value="activemq.default" />
		<property name="maxConnections" value="1" />
		<property name="connectionFactory" ref="AmqXaCF" />
		<property name="transactionManager" ref="recoverableTxManager" />
	</bean>

	<!-- Defines an ActiveMQ XA-aware ConnectionFactory -->
	<bean id="AmqXaCF" class="org.apache.activemq.ActiveMQXAConnectionFactory">
		<property name="brokerURL"
			value="failover:(tcp://localhost:61616)?jms.prefetchPolicy.all=1" />
		<property name="userName" value="admin" />
		<property name="password" value="admin" />
	</bean>

	<!-- A ResourceManager is needed for every transactional resource in order 
		to recover any outstanding transactions after a crash. It will register with 
		the Aries transaction manager, which then calls recoverResource() on the 
		transactional resource itself. -->
	<bean id="resourceManager-AMQ" class="org.apache.activemq.pool.ActiveMQResourceManager"
		init-method="recoverResource">
		<property name="transactionManager" ref="recoverableTxManager" />
		<!-- CF must be of type ActiveMQConnectionFactory, otherwise no recovery will occur -->
		<property name="connectionFactory" ref="AmqXaCF" />
		<property name="resourceName" value="activemq.default" />
	</bean>
	
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="platformTxManager" />
	</bean>

</beans>